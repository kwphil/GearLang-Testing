// <gearlang/parser> -*- C++ -*-

// This file is part of the GearLang v0.0.1 executable. This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License as published by the Free Software
// Foundation; either version 3, or (at your option) any later version.

// This executable is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details. 

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// See <https://www.gnu.org/licenses/>.

#include <expected>
#include <string>
#include <system_error>
#include <vector>
#include "token"
#include "error"

class Parser 
{
private:
    // The full input
    std::string input = "";
    // What's left of the input
    std::string_view current_list = "";
    // The location (currently unused)
    size_t pos;
    // The list of tokens parsed
    std::vector<Token::Base> tokens;

public:
    Parser(std::string& input) 
    {
        (*this).input = input;
        pos = 0;
        tokens = {};
    }    

    std::optional<char> peek() 
    {
        return input[pos];
    }

    void advance() 
    {
        ++pos;
    }

    /**
     * EOF - End of file
     * Invalid Token - Could not find the token
     */
    auto next_token() -> std::expected<Token::Base, std::error_code> 
    {
        for(auto& try_parse_fn : Token::PARSERS) 
        {
            // Getting the result
            auto result = try_parse_fn(input);

            // If success
            if(result)
            {
                auto [ token, remaining_input ] = result.value();

                current_list = remaining_input;

                tokens.push_back(token);

                return std::expected<Token::Base, std::error_code>{std::move(token)};
            }
        }

        // No parser returned successful
        return std::unexpected(std::error_code(ErrorCode::UnexpectedToken));
    }
};
